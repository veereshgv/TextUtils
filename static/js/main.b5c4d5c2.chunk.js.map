{"version":3,"sources":["components/About.js","components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","mystyle","setMyStyle","btnText","setBtnText","className","style","id","type","onClick","border","Alert","props","alert","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","to","title","aboutText","toggleMode","htmlFor","TextForm","text","setText","heading","value","onChange","event","target","rows","newText","showAlert","document","getElementById","select","navigator","clipboard","writeText","split","length","defaultProps","App","setMode","setAlert","message","setTimeout","body","exact","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b5c4d5c2.chunk.js","sourcesContent":["// import { buildQueries } from \"@testing-library/react\";\r\nimport React, { useState } from \"react\";\r\n\r\nexport default function About() {\r\n  const [mystyle, setMyStyle] = useState({\r\n    color: \"black\",\r\n    backgroundColor: \"white\",\r\n  });\r\n  const [btnText, setBtnText] = useState(\"Enable Dark Mode\");\r\n\r\n  const toggleBtn = () => {\r\n    if (mystyle.color === \"black\") {\r\n      setMyStyle({\r\n        color: \"white\",\r\n        backgroundColor: \"black\",\r\n        border: \"1px solid white\",\r\n      });\r\n      setBtnText(\"Enable Light Mode\");\r\n    } else {\r\n      setMyStyle({\r\n        color: \"black\",\r\n        backgroundColor: \"white\",\r\n      });\r\n      setBtnText(\"Enable Dark Mode\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\" style={mystyle}>\r\n      <h1 className=\"my-3\">About Us </h1>\r\n      <div className=\"accordion\" id=\"accordionExample\">\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button\r\n              className=\"accordion-button\"\r\n              style={mystyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={mystyle}>\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={mystyle}>\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              style={mystyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={mystyle}>\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              style={mystyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n            >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={mystyle}>\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"container my-3\">\r\n        <button onClick={toggleBtn} type=\"button\" className=\"btn btn-success\">\r\n          {btnText}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n  const capitalize = (word) => {\r\n    let lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n  return (\r\n    props.alert && (\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capitalize(props.alert.type)}</strong>\r\n        {props.alert.msg}\r\n        {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n      </div>\r\n    )\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">\r\n          {props.title}\r\n        </Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n            </form> */}\r\n\r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            }`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick={props.toggleMode}\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Enable Dark Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  // this is used when you dont pass props as attribute in App.js (ie in <Navbar/>)\r\n  title: \"Set title here\",\r\n  aboutText: \"About title here\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\n// we used {useState} hook to create state variable\r\n// we initialized text, setText state variables using useState\r\n\r\nexport default function TextForm(props) {\r\n  const [text, setText] = useState(\"Enter text here...\");\r\n  // default value of text is 'Enter text here', we can update it using setText\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"Handle on change\");\r\n    setText(event.target.value);\r\n  };\r\n  const handleUpClick = () => {\r\n    // console.log(\"Button was clicked: \" + text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\": Converted to Upper case\", \"success\");\r\n  };\r\n\r\n  const handleLowClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\": Converted to Lower case\", \"success\");\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    let newText = \"\";\r\n    setText(newText);\r\n  };\r\n\r\n  const handleCopy = () => {\r\n    let text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}\r\n      >\r\n        <h3> {props.heading}</h3>\r\n        <textarea\r\n          className=\"form-control\"\r\n          id=\"myBox\"\r\n          value={text}\r\n          onChange={handleOnChange}\r\n          style={{\r\n            backgroundColor: props.mode === \"dark\" ? \"#495057\" : \"white\",\r\n            color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n          }}\r\n          rows=\"6\"\r\n        ></textarea>\r\n        {/* onChange is used to enable typing in the text area */}\r\n        <button className=\"btn btn-primary my-3 mx-2\" onClick={handleUpClick}>\r\n          Convert to UpperCase\r\n        </button>\r\n        <button className=\"btn btn-primary my-3 mx-2\" onClick={handleLowClick}>\r\n          Convert to LowerCase\r\n        </button>\r\n        <button\r\n          className=\"btn btn-primary my-3 mx-2\"\r\n          onClick={handleClearClick}\r\n        >\r\n          Clear Text\r\n        </button>\r\n        <button className=\"btn btn-primary my-3 mx-2\" onClick={handleCopy}>\r\n          Copy Text\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container2 my-2\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}\r\n      >\r\n        <h4> Your text summmary here</h4>\r\n        <p>\r\n          {text.split(\" \").length} words and {text.length} characters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} Minutes to read</p>\r\n        <h4>Preview</h4>\r\n        <p>{text.length > 0 ? text : \"Enter Your Text To Preview...\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport About from \"./components/About\";\nimport Alert from \"./components/Alert\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport { BrowserRouter as Router, Routes, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); // whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#495057\";\n      showAlert(\": Dark Mode has been enabled\", \"success\");\n      document.title = \"TextUtils- Dark Mode\";\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\": Light Mode has been enabled\", \"success\");\n      document.title = \"TextUtils- Light Mode\";\n    }\n  };\n  return (\n    <>\n      <Router>\n        <Navbar\n          title=\"TextUtils\"\n          mode={mode}\n          toggleMode={toggleMode}\n          aboutText=\"About Us\"\n        />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          <Routes>\n            <Route exact path=\"/about\" element={<About />}></Route>\n\n            <Route\n              exact\n              path=\"/\"\n              element={\n                <TextForm\n                  showAlert={showAlert}\n                  heading=\"Enter Text to Analyze\"\n                  mode={mode}\n                />\n              }\n            ></Route>\n          </Routes>\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}